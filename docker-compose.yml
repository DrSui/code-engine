services:
  redis:
    image: redis:7-alpine
    container_name: trigger_redis
    ports:
      - "6379:6379"
    restart: unless-stopped

  web:
    build: .
    container_name: trigger_web
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - ./:/app
    ports:
      - "8000:8000"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
    restart: unless-stopped

  executor:
    build: .
    container_name: trigger_executor
    # Use the start wrapper that sets umask then runs uvicorn on a UDS
    command: ["./start-executor.sh"]
    volumes:
      - ./:/app
      - executor_sock:/tmp/executor_sock   # shared sock directory
    # no need to expose ports for UDS
    environment:
      - CUSTOM_TIMEOUT_SECONDS=5
      - CUSTOM_CPU_SECONDS=2
      - CUSTOM_MEMORY_MB=100
    depends_on:
      - redis
    restart: unless-stopped

  worker:
    build: .
    container_name: trigger_worker
    command: celery -A celery_app.celery worker --loglevel=info --concurrency=1 --include=tasks
    volumes:
      - ./:/app
      - executor_sock:/tmp/executor_sock   # mount same volume to access socket
    environment:
      - EXECUTOR_URL=unix:///tmp/executor_sock/executor.sock
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
      - executor
    restart: unless-stopped

volumes:
  executor_sock:
    # client:
  #   build: .
  #   container_name: trigger_client
  #   command: python client.py
  #   volumes:
  #     - ./:/app
  #   environment:
  #     - BASE_URL=http://web:8000
  #   depends_on:
  #     - web
  #   restart: "no"
  #
